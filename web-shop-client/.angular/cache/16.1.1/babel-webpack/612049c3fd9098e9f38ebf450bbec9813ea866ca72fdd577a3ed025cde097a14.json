{"ast":null,"code":"import { HttpErrorResponse } from \"@angular/common/http\";\nimport { tap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ng-zorro-antd/notification\";\nexport class ErrorHandlerInterceptor {\n  constructor(notificationService) {\n    this.notificationService = notificationService;\n  }\n  intercept(req, next) {\n    return next.handle(req.clone()).pipe(tap({\n      next: event => {},\n      error: err => {\n        if (err instanceof HttpErrorResponse) {\n          //console.log(err.message);\n          this.notificationService.error(\n          //   'HTTP ' + err.status + \" Status Code\",\n          //   err.message ,\n          err.error, '', {\n            nzPlacement: 'top'\n          });\n        }\n      }\n    }));\n  }\n}\nErrorHandlerInterceptor.ɵfac = function ErrorHandlerInterceptor_Factory(t) {\n  return new (t || ErrorHandlerInterceptor)(i0.ɵɵinject(i1.NzNotificationService));\n};\nErrorHandlerInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ErrorHandlerInterceptor,\n  factory: ErrorHandlerInterceptor.ɵfac\n});","map":{"version":3,"names":["HttpErrorResponse","tap","ErrorHandlerInterceptor","constructor","notificationService","intercept","req","next","handle","clone","pipe","event","error","err","nzPlacement","i0","ɵɵinject","i1","NzNotificationService","factory","ɵfac"],"sources":["/Users/kauriya/Documents/Projects/ASP.NET/WebAppShopStudy/web-shop-client/src/app/interceptors/error-handler-interceptor.ts"],"sourcesContent":["import { HttpErrorResponse, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { NzNotificationService } from \"ng-zorro-antd/notification\";\nimport { Observable, catchError, tap } from \"rxjs\";\n\n\n@Injectable()\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n    \n  constructor(\n      private notificationService: NzNotificationService\n  ) { }\n\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      return next.handle(req.clone()).pipe(\n          tap({\n              next: (event) => { },\n              error: (err) => {\n                  if(err instanceof HttpErrorResponse) {\n                      //console.log(err.message);\n                      this.notificationService.error(\n                        //   'HTTP ' + err.status + \" Status Code\",\n                        //   err.message ,\n                            err.error,\n                            '',\n                          { nzPlacement: 'top' }\n                      )\n                  }\n              }\n          }),\n      );\n  }\n}\n  \n "],"mappings":"AAAA,SAASA,iBAAiB,QAA8D,sBAAsB;AAG9G,SAAiCC,GAAG,QAAQ,MAAM;;;AAIlD,OAAM,MAAOC,uBAAuB;EAElCC,YACYC,mBAA0C;IAA1C,KAAAA,mBAAmB,GAAnBA,mBAAmB;EAC3B;EAGJC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,OAAOA,IAAI,CAACC,MAAM,CAACF,GAAG,CAACG,KAAK,EAAE,CAAC,CAACC,IAAI,CAChCT,GAAG,CAAC;MACAM,IAAI,EAAGI,KAAK,IAAI,CAAG,CAAC;MACpBC,KAAK,EAAGC,GAAG,IAAI;QACX,IAAGA,GAAG,YAAYb,iBAAiB,EAAE;UACjC;UACA,IAAI,CAACI,mBAAmB,CAACQ,KAAK;UAC5B;UACA;UACIC,GAAG,CAACD,KAAK,EACT,EAAE,EACJ;YAAEE,WAAW,EAAE;UAAK,CAAE,CACzB;;MAET;KACH,CAAC,CACL;EACL;;AAzBWZ,uBAAuB,C;mBAAvBA,uBAAuB,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,qBAAA;AAAA;AAAvBhB,uBAAuB,C;SAAvBA,uBAAuB;EAAAiB,OAAA,EAAvBjB,uBAAuB,CAAAkB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}